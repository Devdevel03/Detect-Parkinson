{"ast":null,"code":"import axios from 'axios';\n\n// Create a pre-configured instance of axios\nconst api = axios.create({\n  // The URL of our FastAPI backend\n  // When using Docker Compose, we'll use the service name 'backend'.\n  // For local development, it's 'http://localhost:8000'.\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' // This will be proxied by Nginx in production\n  : 'http://localhost:8000'\n});\n\n/**\r\n * Uploads a CSV file and returns predictions and explanations.\r\n * @param {FormData} formData - The form data containing the file to upload.\r\n * @returns {Promise<Object>} The prediction data from the API.\r\n */\nexport const uploadAndPredict = async formData => {\n  try {\n    // We send the form data with a 'multipart/form-data' header,\n    // which axios handles automatically with FormData.\n    const response = await api.post('/predict/', formData);\n    return response.data;\n  } catch (error) {\n    // Log and re-throw the error to be handled by the component\n    console.error(\"Error during API call:\", error.response || error.message);\n    throw error.response ? error.response.data : new Error(\"Network or server error\");\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","uploadAndPredict","formData","response","post","data","error","console","message","Error"],"sources":["C:/Users/devin/Desktop/sideProjects/Detect Parkinson Disease/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create a pre-configured instance of axios\r\nconst api = axios.create({\r\n  // The URL of our FastAPI backend\r\n  // When using Docker Compose, we'll use the service name 'backend'.\r\n  // For local development, it's 'http://localhost:8000'.\r\n  baseURL: process.env.NODE_ENV === 'production' \r\n    ? '/api' // This will be proxied by Nginx in production\r\n    : 'http://localhost:8000',\r\n});\r\n\r\n/**\r\n * Uploads a CSV file and returns predictions and explanations.\r\n * @param {FormData} formData - The form data containing the file to upload.\r\n * @returns {Promise<Object>} The prediction data from the API.\r\n */\r\nexport const uploadAndPredict = async (formData) => {\r\n  try {\r\n    // We send the form data with a 'multipart/form-data' header,\r\n    // which axios handles automatically with FormData.\r\n    const response = await api.post('/predict/', formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log and re-throw the error to be handled by the component\r\n    console.error(\"Error during API call:\", error.response || error.message);\r\n    throw error.response ? error.response.data : new Error(\"Network or server error\");\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvB;EACA;EACA;EACAC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAC1C,MAAM,CAAC;EAAA,EACP;AACN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,WAAW,EAAEF,QAAQ,CAAC;IACtD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAACE,OAAO,CAAC;IACxE,MAAMF,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAG,IAAII,KAAK,CAAC,yBAAyB,CAAC;EACnF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}