{"ast":null,"code":"// frontend/src/api.js\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport async function getPredictionFromForm(patientData) {\n  console.log('Sending prediction request to:', `${API_BASE_URL}/predict/`);\n  console.log('Patient data:', patientData);\n  try {\n    const response = await fetch(`${API_BASE_URL}/predict/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(patientData)\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n\n    // Check if the response is ok\n    if (!response.ok) {\n      // Try to get error details from the response\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (jsonError) {\n        // If we can't parse JSON, use the status text\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Create an error object with the details\n      const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n      error.detail = errorData.detail || errorData.message || 'Unknown error occurred';\n      throw error;\n    }\n    const data = await response.json();\n    console.log('Prediction response:', data);\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n\n    // Handle different types of errors\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      // Network connectivity issues\n      const networkError = new Error('Unable to connect to the server. Please check if the backend is running.');\n      networkError.detail = 'Network connectivity issue - ensure your FastAPI server is running on the correct port.';\n      throw networkError;\n    }\n\n    // Re-throw other errors as-is\n    throw error;\n  }\n}\n\n// Health check function to test backend connectivity\nexport async function checkBackendHealth() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Health check failed: ${response.status}`);\n    }\n    const data = await response.json();\n    return {\n      status: 'healthy',\n      data\n    };\n  } catch (error) {\n    console.error('Backend health check failed:', error);\n    return {\n      status: 'unhealthy',\n      error: error.message\n    };\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getPredictionFromForm","patientData","console","log","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","json","jsonError","Error","statusText","error","detail","message","data","name","includes","networkError","checkBackendHealth"],"sources":["C:/Users/devin/Desktop/sideProjects/Detect Parkinson Disease/frontend/src/api.js"],"sourcesContent":["// frontend/src/api.js\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nexport async function getPredictionFromForm(patientData) {\r\n  console.log('Sending prediction request to:', `${API_BASE_URL}/predict/`);\r\n  console.log('Patient data:', patientData);\r\n  \r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/predict/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n      },\r\n      body: JSON.stringify(patientData),\r\n    });\r\n\r\n    console.log('Response status:', response.status);\r\n    console.log('Response headers:', response.headers);\r\n\r\n    // Check if the response is ok\r\n    if (!response.ok) {\r\n      // Try to get error details from the response\r\n      let errorData;\r\n      try {\r\n        errorData = await response.json();\r\n      } catch (jsonError) {\r\n        // If we can't parse JSON, use the status text\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      // Create an error object with the details\r\n      const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      error.detail = errorData.detail || errorData.message || 'Unknown error occurred';\r\n      throw error;\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Prediction response:', data);\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('API call failed:', error);\r\n    \r\n    // Handle different types of errors\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      // Network connectivity issues\r\n      const networkError = new Error('Unable to connect to the server. Please check if the backend is running.');\r\n      networkError.detail = 'Network connectivity issue - ensure your FastAPI server is running on the correct port.';\r\n      throw networkError;\r\n    }\r\n    \r\n    // Re-throw other errors as-is\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Health check function to test backend connectivity\r\nexport async function checkBackendHealth() {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Health check failed: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return { status: 'healthy', data };\r\n  } catch (error) {\r\n    console.error('Backend health check failed:', error);\r\n    return { status: 'unhealthy', error: error.message };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}